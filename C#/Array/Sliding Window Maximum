    
    
    239. Sliding Window Maximum
    Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].
    
    
    
    public class Solution {
        public int[] MaxSlidingWindow(int[] nums, int k) {
            //linked list to handle two way
            if(nums == null || nums.Length == 0) return new int[0];
            LinkedList<int> deque = new LinkedList<int>();
            int[] res = new int[nums.Length + 1 - k];
            for(int i = 0; i < nums.Length; i++){
                // 每当新数进来时，如果发现队列头部的数的下标，是窗口最左边数的下标，则扔掉
                if(deque.Count>0 && deque.First() == i - k) deque.RemoveFirst();
                // 把队列尾部所有比新数小的都扔掉，保证队列是降序的
                while(deque.Count>0 && nums[deque.Last()] < nums[i]) deque.RemoveLast();
                // 加入新数
                deque.AddLast(i);
                // 队列头部就是该窗口内第一大的
                if((i + 1) >= k) 
                    res[i + 1 - k] = nums[deque.First()];
            }
            return res;
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
